# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pce', [dirname(__file__)])
        except ImportError:
            import _pce
            return _pce
        if fp is not None:
            try:
                _mod = imp.load_module('_pce', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pce = swig_import_helper()
    del swig_import_helper
else:
    import _pce
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


import collections
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pce.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pce.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pce.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pce.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pce.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pce.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pce.SwigPyIterator_copy(self)

    def next(self):
        return _pce.SwigPyIterator_next(self)

    def __next__(self):
        return _pce.SwigPyIterator___next__(self)

    def previous(self):
        return _pce.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pce.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pce.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pce.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pce.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pce.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pce.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pce.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pce.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doublep():
    return _pce.new_doublep()
new_doublep = _pce.new_doublep

def copy_doublep(value):
    return _pce.copy_doublep(value)
copy_doublep = _pce.copy_doublep

def delete_doublep(obj):
    return _pce.delete_doublep(obj)
delete_doublep = _pce.delete_doublep

def doublep_assign(obj, value):
    return _pce.doublep_assign(obj, value)
doublep_assign = _pce.doublep_assign

def doublep_value(obj):
    return _pce.doublep_value(obj)
doublep_value = _pce.doublep_value
class PCBasis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCBasis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PCBasis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pce.new_PCBasis(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pce.delete_PCBasis
    __del__ = lambda self: None

    def Init1dQuadPoints(self, qdpts):
        return _pce.PCBasis_Init1dQuadPoints(self, qdpts)

    def Eval1dBasisAtQuadPoints(self):
        return _pce.PCBasis_Eval1dBasisAtQuadPoints(self)

    def Eval1dBasisAtCustPoints(self, psi, kord, custPoints):
        return _pce.PCBasis_Eval1dBasisAtCustPoints(self, psi, kord, custPoints)

    def EvalBasis(self, *args):
        return _pce.PCBasis_EvalBasis(self, *args)

    def Eval1dNormSq_Exact(self, kord):
        return _pce.PCBasis_Eval1dNormSq_Exact(self, kord)

    def EvalDerivBasis(self, xi, basisDEvals):
        return _pce.PCBasis_EvalDerivBasis(self, xi, basisDEvals)

    def Eval1dDerivBasisAtCustPoints(self, dpsi, kord, custPoints):
        return _pce.PCBasis_Eval1dDerivBasisAtCustPoints(self, dpsi, kord, custPoints)

    def Eval2ndDerivBasis(self, xi, ddP):
        return _pce.PCBasis_Eval2ndDerivBasis(self, xi, ddP)

    def Eval2ndDerivCustPoints(self, psi, kord, custPoints):
        return _pce.PCBasis_Eval2ndDerivCustPoints(self, psi, kord, custPoints)

    def Get1dNormsSq(self, psi1dSq):
        return _pce.PCBasis_Get1dNormsSq(self, psi1dSq)

    def Get1dNormsSqExact(self, psi1dSqExact):
        return _pce.PCBasis_Get1dNormsSqExact(self, psi1dSqExact)

    def GetRandSample(self, *args):
        return _pce.PCBasis_GetRandSample(self, *args)

    def GetSeed(self):
        return _pce.PCBasis_GetSeed(self)

    def SeedRandNumGen(self, seed):
        return _pce.PCBasis_SeedRandNumGen(self, seed)

    def GetQuadRule(self, qPoints, qWeights, qIndices):
        return _pce.PCBasis_GetQuadRule(self, qPoints, qWeights, qIndices)

    def GetQuadPoints(self, quadPoints):
        return _pce.PCBasis_GetQuadPoints(self, quadPoints)

    def GetQuadWeights(self, quadWeights):
        return _pce.PCBasis_GetQuadWeights(self, quadWeights)

    def GetQuadIndices(self, quadIndices):
        return _pce.PCBasis_GetQuadIndices(self, quadIndices)

    def GetBasisAtQuadPoints(self, psi1d):
        return _pce.PCBasis_GetBasisAtQuadPoints(self, psi1d)

    def GetPCType(self):
        return _pce.PCBasis_GetPCType(self)

    def GetAlpha(self):
        return _pce.PCBasis_GetAlpha(self)

    def GetBeta(self):
        return _pce.PCBasis_GetBeta(self)
PCBasis_swigregister = _pce.PCBasis_swigregister
PCBasis_swigregister(PCBasis)


_pce.TaylorSeries_swigconstant(_pce)
TaylorSeries = _pce.TaylorSeries

_pce.Integration_swigconstant(_pce)
Integration = _pce.Integration
class PCSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PCSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pce.new_PCSet(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pce.delete_PCSet
    __del__ = lambda self: None

    def dPhi_alpha(self, x, alpha, grad):
        return _pce.PCSet_dPhi_alpha(self, x, alpha, grad)

    def dPhi(self, *args):
        return _pce.PCSet_dPhi(self, *args)

    def ddPhi_alpha(self, x, alpha, grad):
        return _pce.PCSet_ddPhi_alpha(self, x, alpha, grad)

    def ddPhi(self, x, mindex, grad, ck):
        return _pce.PCSet_ddPhi(self, x, mindex, grad, ck)

    def SetQd1d(self, qdpts1d, wghts1d, nqd):
        return _pce.PCSet_SetQd1d(self, qdpts1d, wghts1d, nqd)

    def SetQuadRule(self, *args):
        return _pce.PCSet_SetQuadRule(self, *args)

    def PrintMultiIndex(self):
        return _pce.PCSet_PrintMultiIndex(self)

    def PrintMultiIndexNormSquared(self):
        return _pce.PCSet_PrintMultiIndexNormSquared(self)

    def GetPCType(self):
        return _pce.PCSet_GetPCType(self)

    def GetAlpha(self):
        return _pce.PCSet_GetAlpha(self)

    def GetBeta(self):
        return _pce.PCSet_GetBeta(self)

    def GetMultiIndex(self, mindex):
        return _pce.PCSet_GetMultiIndex(self, mindex)

    def GetNormSq(self, normsq):
        return _pce.PCSet_GetNormSq(self, normsq)

    def GetNumberPCTerms(self):
        return _pce.PCSet_GetNumberPCTerms(self)

    def GetNDim(self):
        return _pce.PCSet_GetNDim(self)

    def GetOrder(self):
        return _pce.PCSet_GetOrder(self)

    def GetNQuadPoints(self):
        return _pce.PCSet_GetNQuadPoints(self)

    def GetQuadPointsWeights(self, quad, wghts):
        return _pce.PCSet_GetQuadPointsWeights(self, quad, wghts)

    def GetQuadPoints(self, *args):
        return _pce.PCSet_GetQuadPoints(self, *args)

    def GetQuadWeights(self, *args):
        return _pce.PCSet_GetQuadWeights(self, *args)

    def GetPsi(self, *args):
        return _pce.PCSet_GetPsi(self, *args)

    def GetPsiSq(self, *args):
        return _pce.PCSet_GetPsiSq(self, *args)

    def GetTaylorTolerance(self):
        return _pce.PCSet_GetTaylorTolerance(self)

    def SetTaylorTolerance(self, rTol):
        return _pce.PCSet_SetTaylorTolerance(self, rTol)

    def GetTaylorTermsMax(self):
        return _pce.PCSet_GetTaylorTermsMax(self)

    def SetTaylorTermsMax(self, maxTerm):
        return _pce.PCSet_SetTaylorTermsMax(self, maxTerm)

    def SetLogCompMethod(self, logMethod):
        return _pce.PCSet_SetLogCompMethod(self, logMethod)

    def GetGMRESDivTolerance(self):
        return _pce.PCSet_GetGMRESDivTolerance(self)

    def SetGMRESDivTolerance(self, rTol):
        return _pce.PCSet_SetGMRESDivTolerance(self, rTol)

    def InitMeanStDv(self, *args):
        return _pce.PCSet_InitMeanStDv(self, *args)

    def Copy(self, *args):
        return _pce.PCSet_Copy(self, *args)

    def Add(self, *args):
        return _pce.PCSet_Add(self, *args)

    def AddInPlace(self, *args):
        return _pce.PCSet_AddInPlace(self, *args)

    def Multiply(self, *args):
        return _pce.PCSet_Multiply(self, *args)

    def MultiplyInPlace(self, *args):
        return _pce.PCSet_MultiplyInPlace(self, *args)

    def Subtract(self, *args):
        return _pce.PCSet_Subtract(self, *args)

    def SubtractInPlace(self, *args):
        return _pce.PCSet_SubtractInPlace(self, *args)

    def Prod(self, *args):
        return _pce.PCSet_Prod(self, *args)

    def Prod3(self, *args):
        return _pce.PCSet_Prod3(self, *args)

    def Polyn(self, *args):
        return _pce.PCSet_Polyn(self, *args)

    def PolynMulti(self, polycf, mindex, p1, p2):
        return _pce.PCSet_PolynMulti(self, polycf, mindex, p1, p2)

    def Exp(self, *args):
        return _pce.PCSet_Exp(self, *args)

    def Log(self, *args):
        return _pce.PCSet_Log(self, *args)

    def Log10(self, *args):
        return _pce.PCSet_Log10(self, *args)

    def RPow(self, *args):
        return _pce.PCSet_RPow(self, *args)

    def IPow(self, *args):
        return _pce.PCSet_IPow(self, *args)

    def Inv(self, *args):
        return _pce.PCSet_Inv(self, *args)

    def Div(self, *args):
        return _pce.PCSet_Div(self, *args)

    def StDv(self, *args):
        return _pce.PCSet_StDv(self, *args)

    def GetModesRMS(self, *args):
        return _pce.PCSet_GetModesRMS(self, *args)

    def Derivative(self, *args):
        return _pce.PCSet_Derivative(self, *args)

    def GetNumTripleProd(self):
        return _pce.PCSet_GetNumTripleProd(self)

    def GetTripleProd(self, *args):
        return _pce.PCSet_GetTripleProd(self, *args)

    def GetNumQuadProd(self):
        return _pce.PCSet_GetNumQuadProd(self)

    def GetQuadProd(self, *args):
        return _pce.PCSet_GetQuadProd(self, *args)

    def SeedBasisRandNumGen(self, seed):
        return _pce.PCSet_SeedBasisRandNumGen(self, seed)

    def DrawSampleSet(self, *args):
        return _pce.PCSet_DrawSampleSet(self, *args)

    def DrawSampleVar(self, *args):
        return _pce.PCSet_DrawSampleVar(self, *args)

    def EvalPC(self, *args):
        return _pce.PCSet_EvalPC(self, *args)

    def EvalPCAtCustPoints(self, xch, custPoints, p):
        return _pce.PCSet_EvalPCAtCustPoints(self, xch, custPoints, p)

    def EvalBasisAtCustPts(self, *args):
        return _pce.PCSet_EvalBasisAtCustPts(self, *args)

    def GalerkProjection(self, fcn, ck):
        return _pce.PCSet_GalerkProjection(self, fcn, ck)

    def GalerkProjectionMC(self, x, fcn, ck):
        return _pce.PCSet_GalerkProjectionMC(self, x, fcn, ck)

    def ComputeOrders(self, orders):
        return _pce.PCSet_ComputeOrders(self, orders)

    def ComputeEffDims(self, *args):
        return _pce.PCSet_ComputeEffDims(self, *args)

    def EncodeMindex(self, sp_mindex):
        return _pce.PCSet_EncodeMindex(self, sp_mindex)

    def ComputeMean(self, *args):
        return _pce.PCSet_ComputeMean(self, *args)

    def ComputeVarFrac(self, *args):
        return _pce.PCSet_ComputeVarFrac(self, *args)

    def ComputeMainSens(self, coef, mainsens):
        return _pce.PCSet_ComputeMainSens(self, coef, mainsens)

    def ComputeTotSens(self, coef, totsens):
        return _pce.PCSet_ComputeTotSens(self, coef, totsens)

    def ComputeJointSens(self, coef, jointsens):
        return _pce.PCSet_ComputeJointSens(self, coef, jointsens)

    def SetVerbosity(self, verbosity):
        return _pce.PCSet_SetVerbosity(self, verbosity)

    def EvalNormSq(self, *args):
        return _pce.PCSet_EvalNormSq(self, *args)

    def EvalNormSqExact(self, normsq):
        return _pce.PCSet_EvalNormSqExact(self, normsq)

    def IsInDomain(self, x):
        return _pce.PCSet_IsInDomain(self, x)
PCSet_swigregister = _pce.PCSet_swigregister
PCSet_swigregister(PCSet)

# This file is compatible with both classic and new-style classes.


