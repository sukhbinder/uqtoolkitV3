# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_uqtkarray', [dirname(__file__)])
        except ImportError:
            import _uqtkarray
            return _uqtkarray
        if fp is not None:
            try:
                _mod = imp.load_module('_uqtkarray', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _uqtkarray = swig_import_helper()
    del swig_import_helper
else:
    import _uqtkarray
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


import collections
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _uqtkarray.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _uqtkarray.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _uqtkarray.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _uqtkarray.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _uqtkarray.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _uqtkarray.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _uqtkarray.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _uqtkarray.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _uqtkarray.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _uqtkarray.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _uqtkarray.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _uqtkarray.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _uqtkarray.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _uqtkarray.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _uqtkarray.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _uqtkarray.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _uqtkarray.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _uqtkarray.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doublep():
    """new_doublep() -> double *"""
    return _uqtkarray.new_doublep()

def copy_doublep(value):
    """
    copy_doublep(double value) -> double *

    Parameters
    ----------
    value: double

    """
    return _uqtkarray.copy_doublep(value)

def delete_doublep(obj):
    """
    delete_doublep(double * obj)

    Parameters
    ----------
    obj: double *

    """
    return _uqtkarray.delete_doublep(obj)

def doublep_assign(obj, value):
    """
    doublep_assign(double * obj, double value)

    Parameters
    ----------
    obj: double *
    value: double

    """
    return _uqtkarray.doublep_assign(obj, value)

def doublep_value(obj):
    """
    doublep_value(double * obj) -> double

    Parameters
    ----------
    obj: double *

    """
    return _uqtkarray.doublep_value(obj)

def paste(x, y, xy):
    """
    paste(dblArray2D x, dblArray2D y, dblArray2D xy)

    Parameters
    ----------
    x: Array2D< double > &
    y: Array2D< double > &
    xy: Array2D< double > &

    """
    return _uqtkarray.paste(x, y, xy)

def merge(*args):
    """
    merge(dblArray2D x, dblArray2D y, dblArray2D xy)

    Parameters
    ----------
    x: Array2D< double > &
    y: Array2D< double > &
    xy: Array2D< double > &

    merge(dblArray1D x, dblArray1D y, dblArray1D xy)

    Parameters
    ----------
    x: Array1D< double > &
    y: Array1D< double > &
    xy: Array1D< double > &

    merge(intArray1D x, intArray1D y, intArray1D xy)

    Parameters
    ----------
    x: Array1D< int > &
    y: Array1D< int > &
    xy: Array1D< int > &

    """
    return _uqtkarray.merge(*args)

def append(*args):
    """
    append(dblArray1D x, dblArray1D y)

    Parameters
    ----------
    x: Array1D< double > &
    y: Array1D< double > &

    append(intArray1D x, intArray1D y)

    Parameters
    ----------
    x: Array1D< int > &
    y: Array1D< int > &

    """
    return _uqtkarray.append(*args)

def flatten(arr_2, arr_1):
    """
    flatten(dblArray2D arr_2, dblArray1D arr_1)

    Parameters
    ----------
    arr_2: Array2D< double > &
    arr_1: Array1D< double > &

    """
    return _uqtkarray.flatten(arr_2, arr_1)

def fold_1dto2d(x1, x2):
    """
    fold_1dto2d(dblArray1D x1, dblArray2D x2)

    Parameters
    ----------
    x1: Array1D< double > &
    x2: Array2D< double > &

    """
    return _uqtkarray.fold_1dto2d(x1, x2)

def swap(*args):
    """
    swap(dblArray1D arr, int i, int j)

    Parameters
    ----------
    arr: Array1D< double > &
    i: int
    j: int

    swap(dblArray2D arr, int i, int j)

    Parameters
    ----------
    arr: Array2D< double > &
    i: int
    j: int

    """
    return _uqtkarray.swap(*args)

def access(nx, ny, arr_1, i, j):
    """
    access(int nx, int ny, dblArray1D arr_1, int i, int j) -> double

    Parameters
    ----------
    nx: int
    ny: int
    arr_1: Array1D< double > &
    i: int
    j: int

    """
    return _uqtkarray.access(nx, ny, arr_1, i, j)

def setdiff(A, B, C):
    """
    setdiff(intArray1D A, intArray1D B, intArray1D C)

    Parameters
    ----------
    A: Array1D< int > &
    B: Array1D< int > &
    C: Array1D< int > &

    """
    return _uqtkarray.setdiff(A, B, C)

def setdiff_s(A, B, C):
    """
    setdiff_s(intArray1D A, intArray1D B, intArray1D C)

    Parameters
    ----------
    A: Array1D< int > &
    B: Array1D< int > &
    C: Array1D< int > &

    """
    return _uqtkarray.setdiff_s(A, B, C)

def shell_sort(*args):
    """
    shell_sort(int * a, int n)

    Parameters
    ----------
    a: int *
    n: int

    shell_sort(intArray1D array)

    Parameters
    ----------
    array: Array1D< int > &

    shell_sort(dblArray1D array)

    Parameters
    ----------
    array: Array1D< double > &

    """
    return _uqtkarray.shell_sort(*args)

def shell_sort_col(array, col, newInd, oldInd):
    """
    shell_sort_col(dblArray2D array, int col, intArray1D newInd, intArray1D oldInd)

    Parameters
    ----------
    array: Array2D< double > &
    col: int
    newInd: Array1D< int > &
    oldInd: Array1D< int > &

    """
    return _uqtkarray.shell_sort_col(array, col, newInd, oldInd)

def shell_sort_all(array, newInd, oldInd):
    """
    shell_sort_all(dblArray2D array, intArray1D newInd, intArray1D oldInd)

    Parameters
    ----------
    array: Array2D< double > &
    newInd: Array1D< int > &
    oldInd: Array1D< int > &

    """
    return _uqtkarray.shell_sort_all(array, newInd, oldInd)

def quicksort3(*args):
    """
    quicksort3(dblArray1D arr, int l, int r)

    Parameters
    ----------
    arr: Array1D< double > &
    l: int
    r: int

    quicksort3(dblArray2D arr, int left, int right, int col)

    Parameters
    ----------
    arr: Array2D< double > &
    left: int
    right: int
    col: int

    quicksort3(dblArray2D arr, int left, int right)

    Parameters
    ----------
    arr: Array2D< double > &
    left: int
    right: int

    """
    return _uqtkarray.quicksort3(*args)

def intersect(*args):
    """
    intersect(intArray1D A, intArray1D B, intArray1D C, intArray1D iA, intArray1D iB)

    Parameters
    ----------
    A: Array1D< int > &
    B: Array1D< int > &
    C: Array1D< int > &
    iA: Array1D< int > &
    iB: Array1D< int > &

    intersect(intArray1D A, intArray1D B, intArray1D C)

    Parameters
    ----------
    A: Array1D< int > &
    B: Array1D< int > &
    C: Array1D< int > &

    """
    return _uqtkarray.intersect(*args)

def prodAlphaMatVec(A, x, alpha, y):
    """
    prodAlphaMatVec(dblArray2D A, dblArray1D x, double alpha, dblArray1D y)

    Parameters
    ----------
    A: Array2D< double > &
    x: Array1D< double > &
    alpha: double
    y: Array1D< double > &

    """
    return _uqtkarray.prodAlphaMatVec(A, x, alpha, y)

def prodAlphaMatTVec(A, x, alpha, y):
    """
    prodAlphaMatTVec(dblArray2D A, dblArray1D x, double alpha, dblArray1D y)

    Parameters
    ----------
    A: Array2D< double > &
    x: Array1D< double > &
    alpha: double
    y: Array1D< double > &

    """
    return _uqtkarray.prodAlphaMatTVec(A, x, alpha, y)

def prodAlphaMatMat(A, B, alpha, C):
    """
    prodAlphaMatMat(dblArray2D A, dblArray2D B, double alpha, dblArray2D C)

    Parameters
    ----------
    A: Array2D< double > &
    B: Array2D< double > &
    alpha: double
    C: Array2D< double > &

    """
    return _uqtkarray.prodAlphaMatMat(A, B, alpha, C)

def prodAlphaMatTMat(A, B, alpha, C):
    """
    prodAlphaMatTMat(dblArray2D A, dblArray2D B, double alpha, dblArray2D C)

    Parameters
    ----------
    A: Array2D< double > &
    B: Array2D< double > &
    alpha: double
    C: Array2D< double > &

    """
    return _uqtkarray.prodAlphaMatTMat(A, B, alpha, C)

def addVecAlphaVecPow(x, alpha, y, ip):
    """
    addVecAlphaVecPow(dblArray1D x, double alpha, dblArray1D y, int ip)

    Parameters
    ----------
    x: Array1D< double > &
    alpha: double
    y: Array1D< double > &
    ip: int

    """
    return _uqtkarray.addVecAlphaVecPow(x, alpha, y, ip)

def prod_vecTmatvec(a, B, c):
    """
    prod_vecTmatvec(dblArray1D a, dblArray2D B, dblArray1D c) -> double

    Parameters
    ----------
    a: Array1D< double > &
    B: Array2D< double > &
    c: Array1D< double > &

    """
    return _uqtkarray.prod_vecTmatvec(a, B, c)

def MatTMat(A):
    """
    MatTMat(dblArray2D A) -> dblArray2D

    Parameters
    ----------
    A: Array2D< double > &

    """
    return _uqtkarray.MatTMat(A)

def paddMatRow(*args):
    """
    paddMatRow(dblArray2D A, dblArray1D x)

    Parameters
    ----------
    A: Array2D< double > &
    x: Array1D< double > &

    paddMatRow(intArray2D A, intArray1D x)

    Parameters
    ----------
    A: Array2D< int > &
    x: Array1D< int > &

    """
    return _uqtkarray.paddMatRow(*args)

def paddMatCol(*args):
    """
    paddMatCol(dblArray2D A, dblArray1D x)

    Parameters
    ----------
    A: Array2D< double > &
    x: Array1D< double > &

    paddMatCol(intArray2D A, intArray1D x)

    Parameters
    ----------
    A: Array2D< int > &
    x: Array1D< int > &

    """
    return _uqtkarray.paddMatCol(*args)

def paddMatColScal(A, x, scal):
    """
    paddMatColScal(dblArray2D A, dblArray1D x, double scal)

    Parameters
    ----------
    A: Array2D< double > &
    x: Array1D< double > &
    scal: double

    """
    return _uqtkarray.paddMatColScal(A, x, scal)

def is_equal(*args):
    """
    is_equal(intArray1D a, intArray1D b) -> bool

    Parameters
    ----------
    a: Array1D< int > &
    b: Array1D< int > &

    is_equal(dblArray1D a, dblArray1D b) -> bool

    Parameters
    ----------
    a: Array1D< double > &
    b: Array1D< double > &

    """
    return _uqtkarray.is_equal(*args)

def is_less(*args):
    """
    is_less(intArray1D a, intArray1D b) -> bool

    Parameters
    ----------
    a: Array1D< int > &
    b: Array1D< int > &

    is_less(dblArray1D a, dblArray1D b) -> bool

    Parameters
    ----------
    a: Array1D< double > &
    b: Array1D< double > &

    """
    return _uqtkarray.is_less(*args)

def vecIsInArray(vec, array):
    """
    vecIsInArray(intArray1D vec, intArray2D array) -> int

    Parameters
    ----------
    vec: Array1D< int > &
    array: Array2D< int > &

    """
    return _uqtkarray.vecIsInArray(vec, array)

def select_kth(k, arr):
    """
    select_kth(int k, dblArray1D arr) -> double

    Parameters
    ----------
    k: int
    arr: Array1D< double > &

    """
    return _uqtkarray.select_kth(k, arr)

def logdeterm(mat):
    """
    logdeterm(dblArray2D mat) -> double

    Parameters
    ----------
    mat: Array2D< double > &

    """
    return _uqtkarray.logdeterm(mat)

def trace(mat):
    """
    trace(dblArray2D mat) -> double

    Parameters
    ----------
    mat: Array2D< double > &

    """
    return _uqtkarray.trace(mat)

def evalLogMVN(x, mu, Sigma):
    """
    evalLogMVN(dblArray1D x, dblArray1D mu, dblArray2D Sigma) -> double

    Parameters
    ----------
    x: Array1D< double > &
    mu: Array1D< double > &
    Sigma: Array2D< double > &

    """
    return _uqtkarray.evalLogMVN(x, mu, Sigma)

def diag(diagonal_array):
    """
    diag(dblArray1D diagonal_array) -> dblArray2D

    Parameters
    ----------
    diagonal_array: Array1D< double > &

    """
    return _uqtkarray.diag(diagonal_array)

def copy(*args):
    """
    copy(dblArray1D arg1) -> dblArray1D

    Parameters
    ----------
    arg1: Array1D< double > &

    copy(dblArray2D arg1) -> dblArray2D

    Parameters
    ----------
    arg1: Array2D< double > &

    """
    return _uqtkarray.copy(*args)

def mtxdel(arg1, index, dim):
    """
    mtxdel(dblArray2D arg1, int index, int dim) -> dblArray2D

    Parameters
    ----------
    arg1: Array2D< double > &
    index: int
    dim: int

    """
    return _uqtkarray.mtxdel(arg1, index, dim)

def add(*args):
    """
    add(dblArray1D arg1, dblArray1D arg2) -> dblArray1D

    Parameters
    ----------
    arg1: Array1D< double > &
    arg2: Array1D< double > &

    add(dblArray2D arg1, dblArray2D arg2) -> dblArray2D

    Parameters
    ----------
    arg1: Array2D< double > &
    arg2: Array2D< double > &

    """
    return _uqtkarray.add(*args)

def addinplace(*args):
    """
    addinplace(dblArray2D x, dblArray2D y)

    Parameters
    ----------
    x: Array2D< double > &
    y: Array2D< double > &

    addinplace(dblArray1D x, dblArray1D y)

    Parameters
    ----------
    x: Array1D< double > &
    y: Array1D< double > &

    """
    return _uqtkarray.addinplace(*args)

def subtract(*args):
    """
    subtract(dblArray1D arg1, dblArray1D arg2) -> dblArray1D

    Parameters
    ----------
    arg1: Array1D< double > &
    arg2: Array1D< double > &

    subtract(dblArray2D arg1, dblArray2D arg2) -> dblArray2D

    Parameters
    ----------
    arg1: Array2D< double > &
    arg2: Array2D< double > &

    """
    return _uqtkarray.subtract(*args)

def scale(*args):
    """
    scale(dblArray1D arg1, double arg2) -> dblArray1D

    Parameters
    ----------
    arg1: Array1D< double > &
    arg2: double

    scale(dblArray2D arg1, double arg2) -> dblArray2D

    Parameters
    ----------
    arg1: Array2D< double > &
    arg2: double

    """
    return _uqtkarray.scale(*args)

def scaleinplace(*args):
    """
    scaleinplace(dblArray1D arg1, double arg2)

    Parameters
    ----------
    arg1: Array1D< double > &
    arg2: double

    scaleinplace(intArray1D arg1, int arg2)

    Parameters
    ----------
    arg1: Array1D< int > &
    arg2: int

    scaleinplace(dblArray2D arg1, double arg2)

    Parameters
    ----------
    arg1: Array2D< double > &
    arg2: double

    scaleinplace(intArray2D arg1, int arg2)

    Parameters
    ----------
    arg1: Array2D< int > &
    arg2: int

    """
    return _uqtkarray.scaleinplace(*args)

def dotmult(*args):
    """
    dotmult(dblArray2D A, dblArray2D B) -> dblArray2D

    Parameters
    ----------
    A: Array2D< double > &
    B: Array2D< double > &

    dotmult(dblArray1D A, dblArray1D B) -> dblArray1D

    Parameters
    ----------
    A: Array1D< double > &
    B: Array1D< double > &

    """
    return _uqtkarray.dotmult(*args)

def dotdivide(*args):
    """
    dotdivide(dblArray2D A, dblArray2D B) -> dblArray2D

    Parameters
    ----------
    A: Array2D< double > &
    B: Array2D< double > &

    dotdivide(dblArray1D A, dblArray1D B) -> dblArray1D

    Parameters
    ----------
    A: Array1D< double > &
    B: Array1D< double > &

    """
    return _uqtkarray.dotdivide(*args)

def norm(arg1):
    """
    norm(dblArray1D arg1) -> double

    Parameters
    ----------
    arg1: Array1D< double > &

    """
    return _uqtkarray.norm(arg1)

def dist_sq(x, y, w):
    """
    dist_sq(dblArray1D x, dblArray1D y, dblArray1D w) -> double

    Parameters
    ----------
    x: Array1D< double > &
    y: Array1D< double > &
    w: Array1D< double > &

    """
    return _uqtkarray.dist_sq(x, y, w)

def Trans(arg1):
    """
    Trans(dblArray2D arg1) -> dblArray2D

    Parameters
    ----------
    arg1: Array2D< double > &

    """
    return _uqtkarray.Trans(arg1)

def dot(*args):
    """
    dot(dblArray1D arg1, dblArray1D arg2) -> double

    Parameters
    ----------
    arg1: Array1D< double > &
    arg2: Array1D< double > &

    dot(dblArray2D arg1, dblArray1D arg2) -> dblArray1D

    Parameters
    ----------
    arg1: Array2D< double > &
    arg2: Array1D< double > &

    dot(dblArray2D arg1, dblArray2D arg2) -> dblArray2D

    Parameters
    ----------
    arg1: Array2D< double > &
    arg2: Array2D< double > &

    """
    return _uqtkarray.dot(*args)

def dotT(arg1, arg2):
    """
    dotT(dblArray2D arg1, dblArray2D arg2) -> dblArray2D

    Parameters
    ----------
    arg1: Array2D< double > &
    arg2: Array2D< double > &

    """
    return _uqtkarray.dotT(arg1, arg2)

def INV(A):
    """
    INV(dblArray2D A) -> dblArray2D

    Parameters
    ----------
    A: Array2D< double > &

    """
    return _uqtkarray.INV(A)

def LSTSQ(A, b, x):
    """
    LSTSQ(dblArray2D A, dblArray1D b, dblArray1D x)

    Parameters
    ----------
    A: Array2D< double > &
    b: Array1D< double > &
    x: Array1D< double > &

    """
    return _uqtkarray.LSTSQ(A, b, x)

def QR(B, Q, R):
    """
    QR(dblArray2D B, dblArray2D Q, dblArray2D R)

    Parameters
    ----------
    B: Array2D< double > &
    Q: Array2D< double > &
    R: Array2D< double > &

    """
    return _uqtkarray.QR(B, Q, R)

def SVD(A, U, S, VT):
    """
    SVD(dblArray2D A, dblArray2D U, dblArray1D S, dblArray2D VT)

    Parameters
    ----------
    A: Array2D< double > &
    U: Array2D< double > &
    S: Array1D< double > &
    VT: Array2D< double > &

    """
    return _uqtkarray.SVD(A, U, S, VT)

def printarray(*args):
    """
    printarray(dblArray1D arg1)

    Parameters
    ----------
    arg1: Array1D< double > &

    printarray(intArray1D arg1)

    Parameters
    ----------
    arg1: Array1D< int > &

    printarray(dblArray2D arg1)

    Parameters
    ----------
    arg1: Array2D< double > &

    printarray(intArray2D arg1)

    Parameters
    ----------
    arg1: Array2D< int > &

    """
    return _uqtkarray.printarray(*args)
class dblVector(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dblVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dblVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(dblVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _uqtkarray.dblVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(dblVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _uqtkarray.dblVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(dblVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _uqtkarray.dblVector___bool__(self)


    def __len__(self):
        """
        __len__(dblVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _uqtkarray.dblVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(dblVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> dblVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _uqtkarray.dblVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(dblVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(dblVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, dblVector v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _uqtkarray.dblVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(dblVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _uqtkarray.dblVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(dblVector self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(dblVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _uqtkarray.dblVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(dblVector self, PySliceObject * slice) -> dblVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(dblVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _uqtkarray.dblVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(dblVector self, PySliceObject * slice, dblVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(dblVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(dblVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _uqtkarray.dblVector___setitem__(self, *args)


    def pop(self):
        """
        pop(dblVector self) -> std::vector< double >::value_type

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _uqtkarray.dblVector_pop(self)


    def append(self, x):
        """
        append(dblVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _uqtkarray.dblVector_append(self, x)


    def empty(self):
        """
        empty(dblVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _uqtkarray.dblVector_empty(self)


    def size(self):
        """
        size(dblVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _uqtkarray.dblVector_size(self)


    def swap(self, v):
        """
        swap(dblVector self, dblVector v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _uqtkarray.dblVector_swap(self, v)


    def begin(self):
        """
        begin(dblVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _uqtkarray.dblVector_begin(self)


    def end(self):
        """
        end(dblVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _uqtkarray.dblVector_end(self)


    def rbegin(self):
        """
        rbegin(dblVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _uqtkarray.dblVector_rbegin(self)


    def rend(self):
        """
        rend(dblVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _uqtkarray.dblVector_rend(self)


    def clear(self):
        """
        clear(dblVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _uqtkarray.dblVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(dblVector self) -> std::vector< double >::allocator_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _uqtkarray.dblVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(dblVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _uqtkarray.dblVector_pop_back(self)


    def erase(self, *args):
        """
        erase(dblVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(dblVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _uqtkarray.dblVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> dblVector
        __init__(std::vector<(double)> self, dblVector arg2) -> dblVector

        Parameters
        ----------
        arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> dblVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> dblVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        this = _uqtkarray.new_dblVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(dblVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _uqtkarray.dblVector_push_back(self, x)


    def front(self):
        """
        front(dblVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _uqtkarray.dblVector_front(self)


    def back(self):
        """
        back(dblVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _uqtkarray.dblVector_back(self)


    def assign(self, n, x):
        """
        assign(dblVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _uqtkarray.dblVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(dblVector self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(dblVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _uqtkarray.dblVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(dblVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(dblVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _uqtkarray.dblVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(dblVector self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _uqtkarray.dblVector_reserve(self, n)


    def capacity(self):
        """
        capacity(dblVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _uqtkarray.dblVector_capacity(self)

    __swig_destroy__ = _uqtkarray.delete_dblVector
    __del__ = lambda self: None
dblVector_swigregister = _uqtkarray.dblVector_swigregister
dblVector_swigregister(dblVector)

class intVector(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(intVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _uqtkarray.intVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(intVector self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _uqtkarray.intVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(intVector self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _uqtkarray.intVector___bool__(self)


    def __len__(self):
        """
        __len__(intVector self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _uqtkarray.intVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> intVector

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _uqtkarray.intVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, intVector v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _uqtkarray.intVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(intVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _uqtkarray.intVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(intVector self, std::vector< int >::difference_type i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(intVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _uqtkarray.intVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(intVector self, PySliceObject * slice) -> intVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(intVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _uqtkarray.intVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(intVector self, PySliceObject * slice, intVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(intVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(intVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _uqtkarray.intVector___setitem__(self, *args)


    def pop(self):
        """
        pop(intVector self) -> std::vector< int >::value_type

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _uqtkarray.intVector_pop(self)


    def append(self, x):
        """
        append(intVector self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _uqtkarray.intVector_append(self, x)


    def empty(self):
        """
        empty(intVector self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _uqtkarray.intVector_empty(self)


    def size(self):
        """
        size(intVector self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _uqtkarray.intVector_size(self)


    def swap(self, v):
        """
        swap(intVector self, intVector v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _uqtkarray.intVector_swap(self, v)


    def begin(self):
        """
        begin(intVector self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _uqtkarray.intVector_begin(self)


    def end(self):
        """
        end(intVector self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _uqtkarray.intVector_end(self)


    def rbegin(self):
        """
        rbegin(intVector self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _uqtkarray.intVector_rbegin(self)


    def rend(self):
        """
        rend(intVector self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _uqtkarray.intVector_rend(self)


    def clear(self):
        """
        clear(intVector self)

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _uqtkarray.intVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(intVector self) -> std::vector< int >::allocator_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _uqtkarray.intVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(intVector self)

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _uqtkarray.intVector_pop_back(self)


    def erase(self, *args):
        """
        erase(intVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(intVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _uqtkarray.intVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> intVector
        __init__(std::vector<(int)> self, intVector arg2) -> intVector

        Parameters
        ----------
        arg2: std::vector< int > const &

        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> intVector

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> intVector

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        this = _uqtkarray.new_intVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(intVector self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _uqtkarray.intVector_push_back(self, x)


    def front(self):
        """
        front(intVector self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _uqtkarray.intVector_front(self)


    def back(self):
        """
        back(intVector self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _uqtkarray.intVector_back(self)


    def assign(self, n, x):
        """
        assign(intVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _uqtkarray.intVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(intVector self, std::vector< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(intVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _uqtkarray.intVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(intVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(intVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _uqtkarray.intVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(intVector self, std::vector< int >::size_type n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _uqtkarray.intVector_reserve(self, n)


    def capacity(self):
        """
        capacity(intVector self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _uqtkarray.intVector_capacity(self)

    __swig_destroy__ = _uqtkarray.delete_intVector
    __del__ = lambda self: None
intVector_swigregister = _uqtkarray.intVector_swigregister
intVector_swigregister(intVector)

class strVector(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(strVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _uqtkarray.strVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(strVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _uqtkarray.strVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(strVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _uqtkarray.strVector___bool__(self)


    def __len__(self):
        """
        __len__(strVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _uqtkarray.strVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(strVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> strVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _uqtkarray.strVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(strVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(strVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, strVector v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _uqtkarray.strVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(strVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _uqtkarray.strVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(strVector self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(strVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _uqtkarray.strVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(strVector self, PySliceObject * slice) -> strVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(strVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _uqtkarray.strVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(strVector self, PySliceObject * slice, strVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(strVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(strVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _uqtkarray.strVector___setitem__(self, *args)


    def pop(self):
        """
        pop(strVector self) -> std::vector< std::string >::value_type

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _uqtkarray.strVector_pop(self)


    def append(self, x):
        """
        append(strVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _uqtkarray.strVector_append(self, x)


    def empty(self):
        """
        empty(strVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _uqtkarray.strVector_empty(self)


    def size(self):
        """
        size(strVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _uqtkarray.strVector_size(self)


    def swap(self, v):
        """
        swap(strVector self, strVector v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _uqtkarray.strVector_swap(self, v)


    def begin(self):
        """
        begin(strVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _uqtkarray.strVector_begin(self)


    def end(self):
        """
        end(strVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _uqtkarray.strVector_end(self)


    def rbegin(self):
        """
        rbegin(strVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _uqtkarray.strVector_rbegin(self)


    def rend(self):
        """
        rend(strVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _uqtkarray.strVector_rend(self)


    def clear(self):
        """
        clear(strVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _uqtkarray.strVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(strVector self) -> std::vector< std::string >::allocator_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _uqtkarray.strVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(strVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _uqtkarray.strVector_pop_back(self)


    def erase(self, *args):
        """
        erase(strVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(strVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _uqtkarray.strVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> strVector
        __init__(std::vector<(std::string)> self, strVector arg2) -> strVector

        Parameters
        ----------
        arg2: std::vector< std::string > const &

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> strVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> strVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        this = _uqtkarray.new_strVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(strVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _uqtkarray.strVector_push_back(self, x)


    def front(self):
        """
        front(strVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _uqtkarray.strVector_front(self)


    def back(self):
        """
        back(strVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _uqtkarray.strVector_back(self)


    def assign(self, n, x):
        """
        assign(strVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _uqtkarray.strVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(strVector self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(strVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _uqtkarray.strVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(strVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(strVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _uqtkarray.strVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(strVector self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _uqtkarray.strVector_reserve(self, n)


    def capacity(self):
        """
        capacity(strVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _uqtkarray.strVector_capacity(self)

    __swig_destroy__ = _uqtkarray.delete_strVector
    __del__ = lambda self: None
strVector_swigregister = _uqtkarray.strVector_swigregister
strVector_swigregister(strVector)


def subMatrix_row_int(matrix, ind, submatrix):
    """
    subMatrix_row_int(intArray2D matrix, intArray1D ind, intArray2D submatrix)

    Parameters
    ----------
    matrix: Array2D< int > &
    ind: Array1D< int > &
    submatrix: Array2D< int > &

    """
    return _uqtkarray.subMatrix_row_int(matrix, ind, submatrix)

def subMatrix_row_dbl(matrix, ind, submatrix):
    """
    subMatrix_row_dbl(dblArray2D matrix, intArray1D ind, dblArray2D submatrix)

    Parameters
    ----------
    matrix: Array2D< double > &
    ind: Array1D< int > &
    submatrix: Array2D< double > &

    """
    return _uqtkarray.subMatrix_row_dbl(matrix, ind, submatrix)
class intArray1D(_object):
    """Proxy of C++ Array1D<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray1D, name)
    __swig_setmethods__["data_"] = _uqtkarray.intArray1D_data__set
    __swig_getmethods__["data_"] = _uqtkarray.intArray1D_data__get
    if _newclass:
        data_ = _swig_property(_uqtkarray.intArray1D_data__get, _uqtkarray.intArray1D_data__set)

    def Assign(self, obj):
        """
        Assign(intArray1D self, intArray1D obj) -> intArray1D

        Parameters
        ----------
        obj: Array1D< int > const &

        """
        return _uqtkarray.intArray1D_Assign(self, obj)


    def __init__(self, *args):
        """
        __init__(Array1D<(int)> self) -> intArray1D
        __init__(Array1D<(int)> self, int const & nx) -> intArray1D

        Parameters
        ----------
        nx: int const &

        __init__(Array1D<(int)> self, int const & nx, int const & t) -> intArray1D

        Parameters
        ----------
        nx: int const &
        t: int const &

        __init__(Array1D<(int)> self, intArray1D obj) -> intArray1D

        Parameters
        ----------
        obj: Array1D< int > const &

        """
        this = _uqtkarray.new_intArray1D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uqtkarray.delete_intArray1D
    __del__ = lambda self: None

    def Clear(self):
        """
        Clear(intArray1D self)

        Parameters
        ----------
        self: Array1D< int > *

        """
        return _uqtkarray.intArray1D_Clear(self)


    def XSize(self):
        """
        XSize(intArray1D self) -> int

        Parameters
        ----------
        self: Array1D< int > const *

        """
        return _uqtkarray.intArray1D_XSize(self)


    def Length(self):
        """
        Length(intArray1D self) -> int

        Parameters
        ----------
        self: Array1D< int > const *

        """
        return _uqtkarray.intArray1D_Length(self)


    def Resize(self, *args):
        """
        Resize(intArray1D self, int const & nx)

        Parameters
        ----------
        nx: int const &

        Resize(intArray1D self, int const & nx, int const & t)

        Parameters
        ----------
        nx: int const &
        t: int const &

        """
        return _uqtkarray.intArray1D_Resize(self, *args)


    def SetValue(self, t):
        """
        SetValue(intArray1D self, int const & t)

        Parameters
        ----------
        t: int const &

        """
        return _uqtkarray.intArray1D_SetValue(self, t)


    def PushBack(self, t):
        """
        PushBack(intArray1D self, int const & t)

        Parameters
        ----------
        t: int const &

        """
        return _uqtkarray.intArray1D_PushBack(self, t)


    def GetArrayPointer(self):
        """
        GetArrayPointer(intArray1D self) -> int *

        Parameters
        ----------
        self: Array1D< int > *

        """
        return _uqtkarray.intArray1D_GetArrayPointer(self)


    def GetConstArrayPointer(self):
        """
        GetConstArrayPointer(intArray1D self) -> int const *

        Parameters
        ----------
        self: Array1D< int > const *

        """
        return _uqtkarray.intArray1D_GetConstArrayPointer(self)


    def __call__(self, *args):
        """
        __call__(intArray1D self, int ix) -> int

        Parameters
        ----------
        ix: int

        __call__(intArray1D self, int ix) -> int const &

        Parameters
        ----------
        ix: int

        """
        return _uqtkarray.intArray1D___call__(self, *args)


    def insert(self, *args):
        """
        insert(intArray1D self, intArray1D insarr, int ix)

        Parameters
        ----------
        insarr: Array1D< int > &
        ix: int

        insert(intArray1D self, int const & insval, int ix)

        Parameters
        ----------
        insval: int const &
        ix: int

        """
        return _uqtkarray.intArray1D_insert(self, *args)


    def erase(self, ix):
        """
        erase(intArray1D self, int ix)

        Parameters
        ----------
        ix: int

        """
        return _uqtkarray.intArray1D_erase(self, ix)


    def DumpBinary(self, *args):
        """
        DumpBinary(intArray1D self, FILE * f_out)

        Parameters
        ----------
        f_out: FILE *

        DumpBinary(intArray1D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.intArray1D_DumpBinary(self, *args)


    def ReadBinary(self, *args):
        """
        ReadBinary(intArray1D self, FILE * f_in)

        Parameters
        ----------
        f_in: FILE *

        ReadBinary(intArray1D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.intArray1D_ReadBinary(self, *args)


    def DumpBinary4py(self, filename):
        """
        DumpBinary4py(intArray1D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.intArray1D_DumpBinary4py(self, filename)


    def ReadBinary4py(self, filename, n):
        """
        ReadBinary4py(intArray1D self, char * filename, int n)

        Parameters
        ----------
        filename: char *
        n: int

        """
        return _uqtkarray.intArray1D_ReadBinary4py(self, filename, n)


    def setArray(self, inarray):
        """
        setArray(intArray1D self, intVector inarray)

        Parameters
        ----------
        inarray: std::vector< int >

        """
        return _uqtkarray.intArray1D_setArray(self, inarray)


    def setnpintArray(self, inarray):
        """
        setnpintArray(intArray1D self, long * inarray)

        Parameters
        ----------
        inarray: long *

        """
        return _uqtkarray.intArray1D_setnpintArray(self, inarray)


    def getnpintArray(self, outarray):
        """
        getnpintArray(intArray1D self, long * outarray)

        Parameters
        ----------
        outarray: long *

        """
        return _uqtkarray.intArray1D_getnpintArray(self, outarray)


    def flatten(self):
        """
        flatten(intArray1D self) -> intVector

        Parameters
        ----------
        self: Array1D< int > *

        """
        return _uqtkarray.intArray1D_flatten(self)


    def type(self):
        """
        type(intArray1D self) -> std::string

        Parameters
        ----------
        self: Array1D< int > *

        """
        return _uqtkarray.intArray1D_type(self)


    def __getitem__(self, *args):
        """
        __getitem__(intArray1D self, int index) -> int

        Parameters
        ----------
        index: int

        __getitem__(intArray1D self, PyObject * slice) -> intArray1D

        Parameters
        ----------
        slice: PyObject *

        """
        return _uqtkarray.intArray1D___getitem__(self, *args)


    def __len__(self):
        """
        __len__(intArray1D self) -> int

        Parameters
        ----------
        self: Array1D< int > *

        """
        return _uqtkarray.intArray1D___len__(self)


    def __setitem__(self, *args):
        """
        __setitem__(intArray1D self, int i, int j)

        Parameters
        ----------
        i: int
        j: int

        __setitem__(intArray1D self, intVector index, intVector vin)

        Parameters
        ----------
        index: std::vector< int >
        vin: std::vector< int >

        """
        return _uqtkarray.intArray1D___setitem__(self, *args)


    def __mul__(self, a):
        """
        __mul__(intArray1D self, int a) -> intArray1D

        Parameters
        ----------
        a: int

        """
        return _uqtkarray.intArray1D___mul__(self, a)


    def __rmul__(self, a):
        """
        __rmul__(intArray1D self, int a) -> intArray1D

        Parameters
        ----------
        a: int

        """
        return _uqtkarray.intArray1D___rmul__(self, a)


    def __add__(self, *args):
        """
        __add__(intArray1D self, intArray1D y) -> intArray1D

        Parameters
        ----------
        y: Array1D< int >

        __add__(intArray1D self, int y) -> intArray1D

        Parameters
        ----------
        y: int

        """
        return _uqtkarray.intArray1D___add__(self, *args)


    def __sub__(self, y):
        """
        __sub__(intArray1D self, intArray1D y) -> intArray1D

        Parameters
        ----------
        y: Array1D< int >

        """
        return _uqtkarray.intArray1D___sub__(self, y)


    def __div__(self, y):
        """
        __div__(intArray1D self, intArray1D y) -> intArray1D

        Parameters
        ----------
        y: Array1D< int >

        """
        return _uqtkarray.intArray1D___div__(self, y)


    def __pow__(self, p):
        """
        __pow__(intArray1D self, double p) -> intArray1D

        Parameters
        ----------
        p: double

        """
        return _uqtkarray.intArray1D___pow__(self, p)


    def copy(self):
        """
        copy(intArray1D self) -> intArray1D

        Parameters
        ----------
        self: Array1D< int > *

        """
        return _uqtkarray.intArray1D_copy(self)


    def __repr__(self):
        """
        __repr__(intArray1D self) -> std::string

        Parameters
        ----------
        self: Array1D< int > *

        """
        return _uqtkarray.intArray1D___repr__(self)


    def shape(self):
        """
        shape(intArray1D self) -> intVector

        Parameters
        ----------
        self: Array1D< int > *

        """
        return _uqtkarray.intArray1D_shape(self)

intArray1D_swigregister = _uqtkarray.intArray1D_swigregister
intArray1D_swigregister(intArray1D)

class dblArray1D(_object):
    """Proxy of C++ Array1D<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dblArray1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dblArray1D, name)
    __swig_setmethods__["data_"] = _uqtkarray.dblArray1D_data__set
    __swig_getmethods__["data_"] = _uqtkarray.dblArray1D_data__get
    if _newclass:
        data_ = _swig_property(_uqtkarray.dblArray1D_data__get, _uqtkarray.dblArray1D_data__set)

    def Assign(self, obj):
        """
        Assign(dblArray1D self, dblArray1D obj) -> dblArray1D

        Parameters
        ----------
        obj: Array1D< double > const &

        """
        return _uqtkarray.dblArray1D_Assign(self, obj)


    def __init__(self, *args):
        """
        __init__(Array1D<(double)> self) -> dblArray1D
        __init__(Array1D<(double)> self, int const & nx) -> dblArray1D

        Parameters
        ----------
        nx: int const &

        __init__(Array1D<(double)> self, int const & nx, double const & t) -> dblArray1D

        Parameters
        ----------
        nx: int const &
        t: double const &

        __init__(Array1D<(double)> self, dblArray1D obj) -> dblArray1D

        Parameters
        ----------
        obj: Array1D< double > const &

        """
        this = _uqtkarray.new_dblArray1D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uqtkarray.delete_dblArray1D
    __del__ = lambda self: None

    def Clear(self):
        """
        Clear(dblArray1D self)

        Parameters
        ----------
        self: Array1D< double > *

        """
        return _uqtkarray.dblArray1D_Clear(self)


    def XSize(self):
        """
        XSize(dblArray1D self) -> int

        Parameters
        ----------
        self: Array1D< double > const *

        """
        return _uqtkarray.dblArray1D_XSize(self)


    def Length(self):
        """
        Length(dblArray1D self) -> int

        Parameters
        ----------
        self: Array1D< double > const *

        """
        return _uqtkarray.dblArray1D_Length(self)


    def Resize(self, *args):
        """
        Resize(dblArray1D self, int const & nx)

        Parameters
        ----------
        nx: int const &

        Resize(dblArray1D self, int const & nx, double const & t)

        Parameters
        ----------
        nx: int const &
        t: double const &

        """
        return _uqtkarray.dblArray1D_Resize(self, *args)


    def SetValue(self, t):
        """
        SetValue(dblArray1D self, double const & t)

        Parameters
        ----------
        t: double const &

        """
        return _uqtkarray.dblArray1D_SetValue(self, t)


    def PushBack(self, t):
        """
        PushBack(dblArray1D self, double const & t)

        Parameters
        ----------
        t: double const &

        """
        return _uqtkarray.dblArray1D_PushBack(self, t)


    def GetArrayPointer(self):
        """
        GetArrayPointer(dblArray1D self) -> double *

        Parameters
        ----------
        self: Array1D< double > *

        """
        return _uqtkarray.dblArray1D_GetArrayPointer(self)


    def GetConstArrayPointer(self):
        """
        GetConstArrayPointer(dblArray1D self) -> double const *

        Parameters
        ----------
        self: Array1D< double > const *

        """
        return _uqtkarray.dblArray1D_GetConstArrayPointer(self)


    def __call__(self, *args):
        """
        __call__(dblArray1D self, int ix) -> double

        Parameters
        ----------
        ix: int

        __call__(dblArray1D self, int ix) -> double const &

        Parameters
        ----------
        ix: int

        """
        return _uqtkarray.dblArray1D___call__(self, *args)


    def insert(self, *args):
        """
        insert(dblArray1D self, dblArray1D insarr, int ix)

        Parameters
        ----------
        insarr: Array1D< double > &
        ix: int

        insert(dblArray1D self, double const & insval, int ix)

        Parameters
        ----------
        insval: double const &
        ix: int

        """
        return _uqtkarray.dblArray1D_insert(self, *args)


    def erase(self, ix):
        """
        erase(dblArray1D self, int ix)

        Parameters
        ----------
        ix: int

        """
        return _uqtkarray.dblArray1D_erase(self, ix)


    def DumpBinary(self, *args):
        """
        DumpBinary(dblArray1D self, FILE * f_out)

        Parameters
        ----------
        f_out: FILE *

        DumpBinary(dblArray1D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.dblArray1D_DumpBinary(self, *args)


    def ReadBinary(self, *args):
        """
        ReadBinary(dblArray1D self, FILE * f_in)

        Parameters
        ----------
        f_in: FILE *

        ReadBinary(dblArray1D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.dblArray1D_ReadBinary(self, *args)


    def DumpBinary4py(self, filename):
        """
        DumpBinary4py(dblArray1D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.dblArray1D_DumpBinary4py(self, filename)


    def ReadBinary4py(self, filename, n):
        """
        ReadBinary4py(dblArray1D self, char * filename, int n)

        Parameters
        ----------
        filename: char *
        n: int

        """
        return _uqtkarray.dblArray1D_ReadBinary4py(self, filename, n)


    def setArray(self, inarray):
        """
        setArray(dblArray1D self, dblVector inarray)

        Parameters
        ----------
        inarray: std::vector< double >

        """
        return _uqtkarray.dblArray1D_setArray(self, inarray)


    def setnpdblArray(self, inarray):
        """
        setnpdblArray(dblArray1D self, double * inarray)

        Parameters
        ----------
        inarray: double *

        """
        return _uqtkarray.dblArray1D_setnpdblArray(self, inarray)


    def getnpdblArray(self, outarray):
        """
        getnpdblArray(dblArray1D self, double * outarray)

        Parameters
        ----------
        outarray: double *

        """
        return _uqtkarray.dblArray1D_getnpdblArray(self, outarray)


    def flatten(self):
        """
        flatten(dblArray1D self) -> dblVector

        Parameters
        ----------
        self: Array1D< double > *

        """
        return _uqtkarray.dblArray1D_flatten(self)


    def type(self):
        """
        type(dblArray1D self) -> std::string

        Parameters
        ----------
        self: Array1D< double > *

        """
        return _uqtkarray.dblArray1D_type(self)


    def __getitem__(self, *args):
        """
        __getitem__(dblArray1D self, int index) -> double

        Parameters
        ----------
        index: int

        __getitem__(dblArray1D self, PyObject * slice) -> dblArray1D

        Parameters
        ----------
        slice: PyObject *

        """
        return _uqtkarray.dblArray1D___getitem__(self, *args)


    def __len__(self):
        """
        __len__(dblArray1D self) -> int

        Parameters
        ----------
        self: Array1D< double > *

        """
        return _uqtkarray.dblArray1D___len__(self)


    def __setitem__(self, *args):
        """
        __setitem__(dblArray1D self, int i, double j)

        Parameters
        ----------
        i: int
        j: double

        __setitem__(dblArray1D self, intVector index, dblVector vin)

        Parameters
        ----------
        index: std::vector< int >
        vin: std::vector< double >

        """
        return _uqtkarray.dblArray1D___setitem__(self, *args)


    def __mul__(self, a):
        """
        __mul__(dblArray1D self, double a) -> dblArray1D

        Parameters
        ----------
        a: double

        """
        return _uqtkarray.dblArray1D___mul__(self, a)


    def __rmul__(self, a):
        """
        __rmul__(dblArray1D self, double a) -> dblArray1D

        Parameters
        ----------
        a: double

        """
        return _uqtkarray.dblArray1D___rmul__(self, a)


    def __add__(self, *args):
        """
        __add__(dblArray1D self, dblArray1D y) -> dblArray1D

        Parameters
        ----------
        y: Array1D< double >

        __add__(dblArray1D self, double y) -> dblArray1D

        Parameters
        ----------
        y: double

        """
        return _uqtkarray.dblArray1D___add__(self, *args)


    def __sub__(self, y):
        """
        __sub__(dblArray1D self, dblArray1D y) -> dblArray1D

        Parameters
        ----------
        y: Array1D< double >

        """
        return _uqtkarray.dblArray1D___sub__(self, y)


    def __div__(self, y):
        """
        __div__(dblArray1D self, dblArray1D y) -> dblArray1D

        Parameters
        ----------
        y: Array1D< double >

        """
        return _uqtkarray.dblArray1D___div__(self, y)


    def __pow__(self, p):
        """
        __pow__(dblArray1D self, double p) -> dblArray1D

        Parameters
        ----------
        p: double

        """
        return _uqtkarray.dblArray1D___pow__(self, p)


    def copy(self):
        """
        copy(dblArray1D self) -> dblArray1D

        Parameters
        ----------
        self: Array1D< double > *

        """
        return _uqtkarray.dblArray1D_copy(self)


    def __repr__(self):
        """
        __repr__(dblArray1D self) -> std::string

        Parameters
        ----------
        self: Array1D< double > *

        """
        return _uqtkarray.dblArray1D___repr__(self)


    def shape(self):
        """
        shape(dblArray1D self) -> intVector

        Parameters
        ----------
        self: Array1D< double > *

        """
        return _uqtkarray.dblArray1D_shape(self)

dblArray1D_swigregister = _uqtkarray.dblArray1D_swigregister
dblArray1D_swigregister(dblArray1D)

class strArray1D(_object):
    """Proxy of C++ Array1D<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strArray1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strArray1D, name)
    __swig_setmethods__["xsize_"] = _uqtkarray.strArray1D_xsize__set
    __swig_getmethods__["xsize_"] = _uqtkarray.strArray1D_xsize__get
    if _newclass:
        xsize_ = _swig_property(_uqtkarray.strArray1D_xsize__get, _uqtkarray.strArray1D_xsize__set)
    __swig_setmethods__["data_"] = _uqtkarray.strArray1D_data__set
    __swig_getmethods__["data_"] = _uqtkarray.strArray1D_data__get
    if _newclass:
        data_ = _swig_property(_uqtkarray.strArray1D_data__get, _uqtkarray.strArray1D_data__set)

    def Assign(self, obj):
        """
        Assign(strArray1D self, strArray1D obj) -> strArray1D

        Parameters
        ----------
        obj: Array1D< std::string > const &

        """
        return _uqtkarray.strArray1D_Assign(self, obj)


    def __init__(self, *args):
        """
        __init__(Array1D<(std::string)> self) -> strArray1D
        __init__(Array1D<(std::string)> self, int const & nx) -> strArray1D

        Parameters
        ----------
        nx: int const &

        __init__(Array1D<(std::string)> self, int const & nx, std::string const & t) -> strArray1D

        Parameters
        ----------
        nx: int const &
        t: std::string const &

        __init__(Array1D<(std::string)> self, strArray1D obj) -> strArray1D

        Parameters
        ----------
        obj: Array1D< std::string > const &

        """
        this = _uqtkarray.new_strArray1D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uqtkarray.delete_strArray1D
    __del__ = lambda self: None

    def Clear(self):
        """
        Clear(strArray1D self)

        Parameters
        ----------
        self: Array1D< std::string > *

        """
        return _uqtkarray.strArray1D_Clear(self)


    def XSize(self):
        """
        XSize(strArray1D self) -> int

        Parameters
        ----------
        self: Array1D< std::string > const *

        """
        return _uqtkarray.strArray1D_XSize(self)


    def Length(self):
        """
        Length(strArray1D self) -> int

        Parameters
        ----------
        self: Array1D< std::string > const *

        """
        return _uqtkarray.strArray1D_Length(self)


    def Resize(self, *args):
        """
        Resize(strArray1D self, int const & nx)

        Parameters
        ----------
        nx: int const &

        Resize(strArray1D self, int const & nx, std::string const & t)

        Parameters
        ----------
        nx: int const &
        t: std::string const &

        """
        return _uqtkarray.strArray1D_Resize(self, *args)


    def SetValue(self, t):
        """
        SetValue(strArray1D self, std::string const & t)

        Parameters
        ----------
        t: std::string const &

        """
        return _uqtkarray.strArray1D_SetValue(self, t)


    def PushBack(self, t):
        """
        PushBack(strArray1D self, std::string const & t)

        Parameters
        ----------
        t: std::string const &

        """
        return _uqtkarray.strArray1D_PushBack(self, t)


    def GetArrayPointer(self):
        """
        GetArrayPointer(strArray1D self) -> std::string *

        Parameters
        ----------
        self: Array1D< std::string > *

        """
        return _uqtkarray.strArray1D_GetArrayPointer(self)


    def GetConstArrayPointer(self):
        """
        GetConstArrayPointer(strArray1D self) -> std::string const *

        Parameters
        ----------
        self: Array1D< std::string > const *

        """
        return _uqtkarray.strArray1D_GetConstArrayPointer(self)


    def __call__(self, *args):
        """
        __call__(strArray1D self, int ix) -> std::string

        Parameters
        ----------
        ix: int

        __call__(strArray1D self, int ix) -> std::string const &

        Parameters
        ----------
        ix: int

        """
        return _uqtkarray.strArray1D___call__(self, *args)


    def insert(self, *args):
        """
        insert(strArray1D self, strArray1D insarr, int ix)

        Parameters
        ----------
        insarr: Array1D< std::string > &
        ix: int

        insert(strArray1D self, std::string const & insval, int ix)

        Parameters
        ----------
        insval: std::string const &
        ix: int

        """
        return _uqtkarray.strArray1D_insert(self, *args)


    def erase(self, ix):
        """
        erase(strArray1D self, int ix)

        Parameters
        ----------
        ix: int

        """
        return _uqtkarray.strArray1D_erase(self, ix)


    def DumpBinary(self, *args):
        """
        DumpBinary(strArray1D self, FILE * f_out)

        Parameters
        ----------
        f_out: FILE *

        DumpBinary(strArray1D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.strArray1D_DumpBinary(self, *args)


    def ReadBinary(self, *args):
        """
        ReadBinary(strArray1D self, FILE * f_in)

        Parameters
        ----------
        f_in: FILE *

        ReadBinary(strArray1D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.strArray1D_ReadBinary(self, *args)


    def DumpBinary4py(self, filename):
        """
        DumpBinary4py(strArray1D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.strArray1D_DumpBinary4py(self, filename)


    def ReadBinary4py(self, filename, n):
        """
        ReadBinary4py(strArray1D self, char * filename, int n)

        Parameters
        ----------
        filename: char *
        n: int

        """
        return _uqtkarray.strArray1D_ReadBinary4py(self, filename, n)


    def setArray(self, inarray):
        """
        setArray(strArray1D self, strVector inarray)

        Parameters
        ----------
        inarray: std::vector< std::string >

        """
        return _uqtkarray.strArray1D_setArray(self, inarray)


    def flatten(self):
        """
        flatten(strArray1D self) -> strVector

        Parameters
        ----------
        self: Array1D< std::string > *

        """
        return _uqtkarray.strArray1D_flatten(self)


    def type(self):
        """
        type(strArray1D self) -> std::string

        Parameters
        ----------
        self: Array1D< std::string > *

        """
        return _uqtkarray.strArray1D_type(self)


    def __getitem__(self, index):
        """
        __getitem__(strArray1D self, int index) -> std::string

        Parameters
        ----------
        index: int

        """
        return _uqtkarray.strArray1D___getitem__(self, index)


    def __len__(self):
        """
        __len__(strArray1D self) -> int

        Parameters
        ----------
        self: Array1D< std::string > *

        """
        return _uqtkarray.strArray1D___len__(self)


    def __setitem__(self, *args):
        """
        __setitem__(strArray1D self, int i, std::string j)

        Parameters
        ----------
        i: int
        j: std::string

        __setitem__(strArray1D self, intVector index, strVector vin)

        Parameters
        ----------
        index: std::vector< int >
        vin: std::vector< std::string >

        """
        return _uqtkarray.strArray1D___setitem__(self, *args)


    def copy(self):
        """
        copy(strArray1D self) -> strArray1D

        Parameters
        ----------
        self: Array1D< std::string > *

        """
        return _uqtkarray.strArray1D_copy(self)


    def __repr__(self):
        """
        __repr__(strArray1D self) -> std::string

        Parameters
        ----------
        self: Array1D< std::string > *

        """
        return _uqtkarray.strArray1D___repr__(self)


    def shape(self):
        """
        shape(strArray1D self) -> intVector

        Parameters
        ----------
        self: Array1D< std::string > *

        """
        return _uqtkarray.strArray1D_shape(self)

strArray1D_swigregister = _uqtkarray.strArray1D_swigregister
strArray1D_swigregister(strArray1D)

class intArray2D(_object):
    """Proxy of C++ Array2D<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray2D, name)
    __swig_setmethods__["xsize_"] = _uqtkarray.intArray2D_xsize__set
    __swig_getmethods__["xsize_"] = _uqtkarray.intArray2D_xsize__get
    if _newclass:
        xsize_ = _swig_property(_uqtkarray.intArray2D_xsize__get, _uqtkarray.intArray2D_xsize__set)
    __swig_setmethods__["ysize_"] = _uqtkarray.intArray2D_ysize__set
    __swig_getmethods__["ysize_"] = _uqtkarray.intArray2D_ysize__get
    if _newclass:
        ysize_ = _swig_property(_uqtkarray.intArray2D_ysize__get, _uqtkarray.intArray2D_ysize__set)
    __swig_setmethods__["data_"] = _uqtkarray.intArray2D_data__set
    __swig_getmethods__["data_"] = _uqtkarray.intArray2D_data__get
    if _newclass:
        data_ = _swig_property(_uqtkarray.intArray2D_data__get, _uqtkarray.intArray2D_data__set)
    __swig_setmethods__["arraycopy"] = _uqtkarray.intArray2D_arraycopy_set
    __swig_getmethods__["arraycopy"] = _uqtkarray.intArray2D_arraycopy_get
    if _newclass:
        arraycopy = _swig_property(_uqtkarray.intArray2D_arraycopy_get, _uqtkarray.intArray2D_arraycopy_set)
    __swig_setmethods__["rowvec"] = _uqtkarray.intArray2D_rowvec_set
    __swig_getmethods__["rowvec"] = _uqtkarray.intArray2D_rowvec_get
    if _newclass:
        rowvec = _swig_property(_uqtkarray.intArray2D_rowvec_get, _uqtkarray.intArray2D_rowvec_set)

    def __init__(self, *args):
        """
        __init__(Array2D<(int)> self) -> intArray2D
        __init__(Array2D<(int)> self, int const & nx, int const & ny) -> intArray2D

        Parameters
        ----------
        nx: int const &
        ny: int const &

        __init__(Array2D<(int)> self, int const & nx, int const & ny, int const & t) -> intArray2D

        Parameters
        ----------
        nx: int const &
        ny: int const &
        t: int const &

        __init__(Array2D<(int)> self, intArray2D obj) -> intArray2D

        Parameters
        ----------
        obj: Array2D< int > const &

        """
        this = _uqtkarray.new_intArray2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uqtkarray.delete_intArray2D
    __del__ = lambda self: None

    def Clear(self):
        """
        Clear(intArray2D self)

        Parameters
        ----------
        self: Array2D< int > *

        """
        return _uqtkarray.intArray2D_Clear(self)


    def XSize(self):
        """
        XSize(intArray2D self) -> int

        Parameters
        ----------
        self: Array2D< int > const *

        """
        return _uqtkarray.intArray2D_XSize(self)


    def YSize(self):
        """
        YSize(intArray2D self) -> int

        Parameters
        ----------
        self: Array2D< int > const *

        """
        return _uqtkarray.intArray2D_YSize(self)


    def Resize(self, *args):
        """
        Resize(intArray2D self, int const & nx, int const & ny)

        Parameters
        ----------
        nx: int const &
        ny: int const &

        Resize(intArray2D self, int const & nx, int const & ny, int const & t)

        Parameters
        ----------
        nx: int const &
        ny: int const &
        t: int const &

        """
        return _uqtkarray.intArray2D_Resize(self, *args)


    def SetValue(self, t):
        """
        SetValue(intArray2D self, int const & t)

        Parameters
        ----------
        t: int const &

        """
        return _uqtkarray.intArray2D_SetValue(self, t)


    def GetArrayPointer(self):
        """
        GetArrayPointer(intArray2D self) -> int *

        Parameters
        ----------
        self: Array2D< int > *

        """
        return _uqtkarray.intArray2D_GetArrayPointer(self)


    def GetConstArrayPointer(self):
        """
        GetConstArrayPointer(intArray2D self) -> int const *

        Parameters
        ----------
        self: Array2D< int > const *

        """
        return _uqtkarray.intArray2D_GetConstArrayPointer(self)


    def __call__(self, *args):
        """
        __call__(intArray2D self, int ix, int iy) -> int

        Parameters
        ----------
        ix: int
        iy: int

        __call__(intArray2D self, int ix, int iy) -> int const &

        Parameters
        ----------
        ix: int
        iy: int

        """
        return _uqtkarray.intArray2D___call__(self, *args)


    def insertRow(self, *args):
        """
        insertRow(intArray2D self, intArray1D insarr, int ix)

        Parameters
        ----------
        insarr: Array1D< int > &
        ix: int

        insertRow(intArray2D self, intArray2D insarr, int ix)

        Parameters
        ----------
        insarr: Array2D< int > &
        ix: int

        """
        return _uqtkarray.intArray2D_insertRow(self, *args)


    def eraseRow(self, ix):
        """
        eraseRow(intArray2D self, int ix)

        Parameters
        ----------
        ix: int

        """
        return _uqtkarray.intArray2D_eraseRow(self, ix)


    def insertCol(self, *args):
        """
        insertCol(intArray2D self, intArray1D insarr, int iy)

        Parameters
        ----------
        insarr: Array1D< int > &
        iy: int

        insertCol(intArray2D self, intArray2D insarr, int iy)

        Parameters
        ----------
        insarr: Array2D< int > &
        iy: int

        """
        return _uqtkarray.intArray2D_insertCol(self, *args)


    def eraseCol(self, iy):
        """
        eraseCol(intArray2D self, int iy)

        Parameters
        ----------
        iy: int

        """
        return _uqtkarray.intArray2D_eraseCol(self, iy)


    def getRow(self, row):
        """
        getRow(intArray2D self, int row)

        Parameters
        ----------
        row: int

        """
        return _uqtkarray.intArray2D_getRow(self, row)


    def DumpBinary(self, *args):
        """
        DumpBinary(intArray2D self, FILE * f_out)

        Parameters
        ----------
        f_out: FILE *

        DumpBinary(intArray2D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.intArray2D_DumpBinary(self, *args)


    def ReadBinary(self, *args):
        """
        ReadBinary(intArray2D self, FILE * f_in)

        Parameters
        ----------
        f_in: FILE *

        ReadBinary(intArray2D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.intArray2D_ReadBinary(self, *args)


    def DumpBinary4py(self, filename):
        """
        DumpBinary4py(intArray2D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.intArray2D_DumpBinary4py(self, filename)


    def ReadBinary4py(self, filename, n1, n2):
        """
        ReadBinary4py(intArray2D self, char * filename, int n1, int n2)

        Parameters
        ----------
        filename: char *
        n1: int
        n2: int

        """
        return _uqtkarray.intArray2D_ReadBinary4py(self, filename, n1, n2)


    def setArray(self, inarray):
        """
        setArray(intArray2D self, intVector inarray)

        Parameters
        ----------
        inarray: std::vector< int >

        """
        return _uqtkarray.intArray2D_setArray(self, inarray)


    def setnpdblArray(self, inarray):
        """
        setnpdblArray(intArray2D self, double * inarray)

        Parameters
        ----------
        inarray: double *

        """
        return _uqtkarray.intArray2D_setnpdblArray(self, inarray)


    def getnpdblArray(self, outarray):
        """
        getnpdblArray(intArray2D self, double * outarray)

        Parameters
        ----------
        outarray: double *

        """
        return _uqtkarray.intArray2D_getnpdblArray(self, outarray)


    def setnpintArray(self, inarray):
        """
        setnpintArray(intArray2D self, long * inarray)

        Parameters
        ----------
        inarray: long *

        """
        return _uqtkarray.intArray2D_setnpintArray(self, inarray)


    def getnpintArray(self, outarray):
        """
        getnpintArray(intArray2D self, long * outarray)

        Parameters
        ----------
        outarray: long *

        """
        return _uqtkarray.intArray2D_getnpintArray(self, outarray)


    def flatten(self):
        """
        flatten(intArray2D self) -> intVector

        Parameters
        ----------
        self: Array2D< int > *

        """
        return _uqtkarray.intArray2D_flatten(self)


    def type(self):
        """
        type(intArray2D self) -> std::string

        Parameters
        ----------
        self: Array2D< int > *

        """
        return _uqtkarray.intArray2D_type(self)


    def __getitem__(self, *args):
        """
        __getitem__(intArray2D self, intVector v) -> int

        Parameters
        ----------
        v: std::vector< int >

        __getitem__(intArray2D self, PyObject * slices) -> intArray2D

        Parameters
        ----------
        slices: PyObject *

        __getitem__(intArray2D self, int row) -> intArray1D

        Parameters
        ----------
        row: int

        """
        return _uqtkarray.intArray2D___getitem__(self, *args)


    def __len__(self):
        """
        __len__(intArray2D self) -> int

        Parameters
        ----------
        self: Array2D< int > *

        """
        return _uqtkarray.intArray2D___len__(self)


    def __setitem__(self, v, j):
        """
        __setitem__(intArray2D self, intVector v, int j)

        Parameters
        ----------
        v: std::vector< int >
        j: int

        """
        return _uqtkarray.intArray2D___setitem__(self, v, j)


    def shape(self):
        """
        shape(intArray2D self) -> intVector

        Parameters
        ----------
        self: Array2D< int > *

        """
        return _uqtkarray.intArray2D_shape(self)


    def __repr__(self):
        """
        __repr__(intArray2D self) -> std::string

        Parameters
        ----------
        self: Array2D< int > *

        """
        return _uqtkarray.intArray2D___repr__(self)

intArray2D_swigregister = _uqtkarray.intArray2D_swigregister
intArray2D_swigregister(intArray2D)

class dblArray2D(_object):
    """Proxy of C++ Array2D<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dblArray2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dblArray2D, name)
    __swig_setmethods__["xsize_"] = _uqtkarray.dblArray2D_xsize__set
    __swig_getmethods__["xsize_"] = _uqtkarray.dblArray2D_xsize__get
    if _newclass:
        xsize_ = _swig_property(_uqtkarray.dblArray2D_xsize__get, _uqtkarray.dblArray2D_xsize__set)
    __swig_setmethods__["ysize_"] = _uqtkarray.dblArray2D_ysize__set
    __swig_getmethods__["ysize_"] = _uqtkarray.dblArray2D_ysize__get
    if _newclass:
        ysize_ = _swig_property(_uqtkarray.dblArray2D_ysize__get, _uqtkarray.dblArray2D_ysize__set)
    __swig_setmethods__["data_"] = _uqtkarray.dblArray2D_data__set
    __swig_getmethods__["data_"] = _uqtkarray.dblArray2D_data__get
    if _newclass:
        data_ = _swig_property(_uqtkarray.dblArray2D_data__get, _uqtkarray.dblArray2D_data__set)
    __swig_setmethods__["arraycopy"] = _uqtkarray.dblArray2D_arraycopy_set
    __swig_getmethods__["arraycopy"] = _uqtkarray.dblArray2D_arraycopy_get
    if _newclass:
        arraycopy = _swig_property(_uqtkarray.dblArray2D_arraycopy_get, _uqtkarray.dblArray2D_arraycopy_set)
    __swig_setmethods__["rowvec"] = _uqtkarray.dblArray2D_rowvec_set
    __swig_getmethods__["rowvec"] = _uqtkarray.dblArray2D_rowvec_get
    if _newclass:
        rowvec = _swig_property(_uqtkarray.dblArray2D_rowvec_get, _uqtkarray.dblArray2D_rowvec_set)

    def __init__(self, *args):
        """
        __init__(Array2D<(double)> self) -> dblArray2D
        __init__(Array2D<(double)> self, int const & nx, int const & ny) -> dblArray2D

        Parameters
        ----------
        nx: int const &
        ny: int const &

        __init__(Array2D<(double)> self, int const & nx, int const & ny, double const & t) -> dblArray2D

        Parameters
        ----------
        nx: int const &
        ny: int const &
        t: double const &

        __init__(Array2D<(double)> self, dblArray2D obj) -> dblArray2D

        Parameters
        ----------
        obj: Array2D< double > const &

        """
        this = _uqtkarray.new_dblArray2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uqtkarray.delete_dblArray2D
    __del__ = lambda self: None

    def Clear(self):
        """
        Clear(dblArray2D self)

        Parameters
        ----------
        self: Array2D< double > *

        """
        return _uqtkarray.dblArray2D_Clear(self)


    def XSize(self):
        """
        XSize(dblArray2D self) -> int

        Parameters
        ----------
        self: Array2D< double > const *

        """
        return _uqtkarray.dblArray2D_XSize(self)


    def YSize(self):
        """
        YSize(dblArray2D self) -> int

        Parameters
        ----------
        self: Array2D< double > const *

        """
        return _uqtkarray.dblArray2D_YSize(self)


    def Resize(self, *args):
        """
        Resize(dblArray2D self, int const & nx, int const & ny)

        Parameters
        ----------
        nx: int const &
        ny: int const &

        Resize(dblArray2D self, int const & nx, int const & ny, double const & t)

        Parameters
        ----------
        nx: int const &
        ny: int const &
        t: double const &

        """
        return _uqtkarray.dblArray2D_Resize(self, *args)


    def SetValue(self, t):
        """
        SetValue(dblArray2D self, double const & t)

        Parameters
        ----------
        t: double const &

        """
        return _uqtkarray.dblArray2D_SetValue(self, t)


    def GetArrayPointer(self):
        """
        GetArrayPointer(dblArray2D self) -> double *

        Parameters
        ----------
        self: Array2D< double > *

        """
        return _uqtkarray.dblArray2D_GetArrayPointer(self)


    def GetConstArrayPointer(self):
        """
        GetConstArrayPointer(dblArray2D self) -> double const *

        Parameters
        ----------
        self: Array2D< double > const *

        """
        return _uqtkarray.dblArray2D_GetConstArrayPointer(self)


    def __call__(self, *args):
        """
        __call__(dblArray2D self, int ix, int iy) -> double

        Parameters
        ----------
        ix: int
        iy: int

        __call__(dblArray2D self, int ix, int iy) -> double const &

        Parameters
        ----------
        ix: int
        iy: int

        """
        return _uqtkarray.dblArray2D___call__(self, *args)


    def insertRow(self, *args):
        """
        insertRow(dblArray2D self, dblArray1D insarr, int ix)

        Parameters
        ----------
        insarr: Array1D< double > &
        ix: int

        insertRow(dblArray2D self, dblArray2D insarr, int ix)

        Parameters
        ----------
        insarr: Array2D< double > &
        ix: int

        """
        return _uqtkarray.dblArray2D_insertRow(self, *args)


    def eraseRow(self, ix):
        """
        eraseRow(dblArray2D self, int ix)

        Parameters
        ----------
        ix: int

        """
        return _uqtkarray.dblArray2D_eraseRow(self, ix)


    def insertCol(self, *args):
        """
        insertCol(dblArray2D self, dblArray1D insarr, int iy)

        Parameters
        ----------
        insarr: Array1D< double > &
        iy: int

        insertCol(dblArray2D self, dblArray2D insarr, int iy)

        Parameters
        ----------
        insarr: Array2D< double > &
        iy: int

        """
        return _uqtkarray.dblArray2D_insertCol(self, *args)


    def eraseCol(self, iy):
        """
        eraseCol(dblArray2D self, int iy)

        Parameters
        ----------
        iy: int

        """
        return _uqtkarray.dblArray2D_eraseCol(self, iy)


    def getRow(self, row):
        """
        getRow(dblArray2D self, int row)

        Parameters
        ----------
        row: int

        """
        return _uqtkarray.dblArray2D_getRow(self, row)


    def DumpBinary(self, *args):
        """
        DumpBinary(dblArray2D self, FILE * f_out)

        Parameters
        ----------
        f_out: FILE *

        DumpBinary(dblArray2D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.dblArray2D_DumpBinary(self, *args)


    def ReadBinary(self, *args):
        """
        ReadBinary(dblArray2D self, FILE * f_in)

        Parameters
        ----------
        f_in: FILE *

        ReadBinary(dblArray2D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.dblArray2D_ReadBinary(self, *args)


    def DumpBinary4py(self, filename):
        """
        DumpBinary4py(dblArray2D self, char * filename)

        Parameters
        ----------
        filename: char *

        """
        return _uqtkarray.dblArray2D_DumpBinary4py(self, filename)


    def ReadBinary4py(self, filename, n1, n2):
        """
        ReadBinary4py(dblArray2D self, char * filename, int n1, int n2)

        Parameters
        ----------
        filename: char *
        n1: int
        n2: int

        """
        return _uqtkarray.dblArray2D_ReadBinary4py(self, filename, n1, n2)


    def setArray(self, inarray):
        """
        setArray(dblArray2D self, dblVector inarray)

        Parameters
        ----------
        inarray: std::vector< double >

        """
        return _uqtkarray.dblArray2D_setArray(self, inarray)


    def setnpdblArray(self, inarray):
        """
        setnpdblArray(dblArray2D self, double * inarray)

        Parameters
        ----------
        inarray: double *

        """
        return _uqtkarray.dblArray2D_setnpdblArray(self, inarray)


    def getnpdblArray(self, outarray):
        """
        getnpdblArray(dblArray2D self, double * outarray)

        Parameters
        ----------
        outarray: double *

        """
        return _uqtkarray.dblArray2D_getnpdblArray(self, outarray)


    def setnpintArray(self, inarray):
        """
        setnpintArray(dblArray2D self, long * inarray)

        Parameters
        ----------
        inarray: long *

        """
        return _uqtkarray.dblArray2D_setnpintArray(self, inarray)


    def getnpintArray(self, outarray):
        """
        getnpintArray(dblArray2D self, long * outarray)

        Parameters
        ----------
        outarray: long *

        """
        return _uqtkarray.dblArray2D_getnpintArray(self, outarray)


    def flatten(self):
        """
        flatten(dblArray2D self) -> dblVector

        Parameters
        ----------
        self: Array2D< double > *

        """
        return _uqtkarray.dblArray2D_flatten(self)


    def type(self):
        """
        type(dblArray2D self) -> std::string

        Parameters
        ----------
        self: Array2D< double > *

        """
        return _uqtkarray.dblArray2D_type(self)


    def __getitem__(self, *args):
        """
        __getitem__(dblArray2D self, intVector v) -> double

        Parameters
        ----------
        v: std::vector< int >

        __getitem__(dblArray2D self, PyObject * slices) -> dblArray2D

        Parameters
        ----------
        slices: PyObject *

        __getitem__(dblArray2D self, int row) -> dblArray1D

        Parameters
        ----------
        row: int

        """
        return _uqtkarray.dblArray2D___getitem__(self, *args)


    def __len__(self):
        """
        __len__(dblArray2D self) -> int

        Parameters
        ----------
        self: Array2D< double > *

        """
        return _uqtkarray.dblArray2D___len__(self)


    def __setitem__(self, v, j):
        """
        __setitem__(dblArray2D self, intVector v, double j)

        Parameters
        ----------
        v: std::vector< int >
        j: double

        """
        return _uqtkarray.dblArray2D___setitem__(self, v, j)


    def shape(self):
        """
        shape(dblArray2D self) -> intVector

        Parameters
        ----------
        self: Array2D< double > *

        """
        return _uqtkarray.dblArray2D_shape(self)


    def __repr__(self):
        """
        __repr__(dblArray2D self) -> std::string

        Parameters
        ----------
        self: Array2D< double > *

        """
        return _uqtkarray.dblArray2D___repr__(self)

dblArray2D_swigregister = _uqtkarray.dblArray2D_swigregister
dblArray2D_swigregister(dblArray2D)


import numpy as np
def uqtk2numpy(x):
	if x.type() == 'int':
		s = x.shape()
		imin = np.argmin(s)
		if len(s) == 1:
			n = s[0]
			y = np.zeros(n,dtype='int64')
			x.getnpintArray(y)
		if len(s) == 2 and np.amin(s) > 1:
			n = s[0]
			m = s[1]
			y = np.zeros((n,m),dtype='int64')
			x.getnpintArray(y)
		if len(s) == 2 and np.amin(s) == 1:
			y = np.array(x.flatten())
		return y.copy()
	else:
		s = x.shape()
		imin = np.argmin(s)
		if len(s) == 1:
			n = s[0]
			y = np.zeros(n)
			x.getnpdblArray(y)
		if len(s) == 2 and np.amin(s) > 1:
			n = s[0]
			m = s[1]
			y = np.zeros((n,m))
			x.getnpdblArray(y)
		if len(s) == 2 and np.amin(s) == 1:
			y = np.array(x.flatten())
		return y.copy()

def numpy2uqtk(y):
	s = np.shape(y)
	if len(s) == 1:
		n = s[0]
		x = dblArray1D(n)
	if len(s) == 2:
		n = s[0]
		m = s[1]
		x = dblArray2D(n,m)
	x.setnpdblArray(np.asfortranarray(y.copy()))
	return x

# This file is compatible with both classic and new-style classes.


